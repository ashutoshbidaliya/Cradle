spring.application.name=profile-service
server.port=8082
logging.level.org.springframework.cloud.gateway=DEBUG


# JPA and Hibernate Properties
# Display SQL statements in the console
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# DataSource Properties
spring.datasource.url=jdbc:postgresql://localhost:5432/cradle
spring.datasource.username=postgres
spring.datasource.password=postgres

# Kafka Bootstrap Servers (should be the same as producer)
spring.kafka.bootstrap-servers=localhost:9092

# Kafka Consumer Properties
spring.kafka.consumer.group-id=profile-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Required for JsonDeserializer to know which packages to trust for deserialization
spring.kafka.consumer.properties.spring.json.trusted.packages=com.adv.profileservice.event,com.adv.userservice.event

# What to do when there is no initial offset in Kafka or if the current offset does not exist any more
# 'earliest': automatically reset the offset to the earliest offset
# 'latest': automatically reset the offset to the latest offset
spring.kafka.consumer.auto-offset-reset=earliest

# Whether the consumer's offset is periodically committed in the background (default: true)
# spring.kafka.consumer.enable-auto-commit=true
# Frequency with which the consumer offsets are auto-committed to Kafka (default: 5000 ms)
# spring.kafka.consumer.auto-commit-interval-ms=5000
# If producer does NOT send type headers (default or JsonSerializer.ADD_TYPE_INFO_HEADERS=false):
spring.kafka.consumer.properties.spring.json.use.type.headers=false
